"use strict";

exports.__esModule = true;
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _light = require("../../colors/light");
var _common = require("../../utils/common");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var Line = function Line(_ref) {
  var _ref$option = _ref.option,
    option = _ref$option === void 0 ? {} : _ref$option,
    _ref$style = _ref.style,
    style = _ref$style === void 0 ? {
      width: '600px',
      height: '300px'
    } : _ref$style;
  // 默认配置项
  var defaultConfig = {
    yData: [],
    xData: [],
    // y轴分段数量
    yAxisSplitNumber: 5,
    // 背景色
    backgroundColor: _light.BG_COLOR.BODY,
    // 对象放在...option后面做覆盖式更新
    // 坐标轴与容器间的边距
    grid: {
      left: 30,
      right: 30,
      top: 30,
      bottom: 30,
      height: 'auto',
      width: 'auto'
    },
    // 刻度相关
    axisTick: {
      length: 5,
      show: true
    }
  };
  var config = (0, _common.mergeObject)(defaultConfig, option);
  var yData = config.yData,
    xData = config.xData,
    yAxisSplitNumber = config.yAxisSplitNumber,
    grid = config.grid,
    _config$axisTick = config.axisTick,
    axisTickLength = _config$axisTick.length,
    axisTickShow = _config$axisTick.show,
    backgroundColor = config.backgroundColor;

  // 初始变量
  var yAxisHeight = ''; // y轴高度
  var xAxisWidth = ''; // x轴宽度
  var yAxisTickSpace = ''; // y轴刻度间距
  var originalPointY = ''; // 原点纵坐标
  var xAxisTopPointX = ''; // x轴顶点横坐标

  // 初始常量
  var originalPointX = grid.left; // 原点横坐标

  // 绘制画布
  var renderCanvas = function renderCanvas(ctx) {
    // 随画布元素数量变化而变化的属性
    var xAxisItemLength = xData.length;
    // x轴元素间距
    var xAxisItemSpace = xAxisWidth / xAxisItemLength;
    // 让x轴（刻度和矩形）向右移动的偏移量
    var xAxisItemSpaceHalf = xAxisItemSpace / 2;
    // 最大最小值
    var maxValue = Math.max.apply(Math, yData);
    var minValue = Math.min.apply(Math, yData);

    // 绘制y轴文字与网格线
    for (var i = 0; i < yAxisSplitNumber; i++) {
      var y = originalPointY - yAxisTickSpace * i;

      // y轴文字
      (0, _common.renderText)(ctx, originalPointX - 10, y, (0, _common.yAxisTickText)(i * yAxisTickSpace, maxValue, minValue, yAxisHeight, 0), 'right', _light.TEXT_COLOR.PRIMARY);
      // 网格线
      (0, _common.renderLine)(ctx, originalPointX, y, xAxisTopPointX, y, _light.BORDER_COLOR.SECOND);
    }

    // 绘制x轴
    (0, _common.renderLine)(ctx, originalPointX, originalPointY, xAxisTopPointX, originalPointY, _light.COLOR.LINE);
    // 绘制x轴刻度与文字
    for (var _i = 0; _i < xAxisItemLength; _i++) {
      var xAxisTickX = (0, _common.xAxisTickPointX)(_i, originalPointX, xAxisItemSpace);
      (0, _common.renderText)(ctx, xAxisTickX + xAxisItemSpaceHalf, originalPointY + axisTickLength + 10, xData[_i], 'center', _light.TEXT_COLOR.PRIMARY);
      axisTickShow && (0, _common.renderLine)(ctx, xAxisTickX, originalPointY, xAxisTickX, originalPointY + axisTickLength, _light.BORDER_COLOR.SECOND);
    }

    // 折线坐标点集合
    var dataPoint = [];
    for (var _i2 = 0; _i2 < xAxisItemLength; _i2++) {
      var value = yData[_i2];
      var x = (0, _common.xAxisTickPointX)(_i2, originalPointX, xAxisItemSpace) + xAxisItemSpaceHalf;
      var _y = originalPointY - (0, _common.valueHeight)(value, maxValue, minValue, yAxisHeight);
      dataPoint.push({
        x: x,
        y: _y
      });
    }

    // 绘制折线
    for (var _i3 = 0; _i3 < dataPoint.length - 1; _i3++) {
      var _dataPoint$_i = dataPoint[_i3],
        _x = _dataPoint$_i.x,
        _y2 = _dataPoint$_i.y;
      var _dataPoint = dataPoint[_i3 + 1],
        nextX = _dataPoint.x,
        nextY = _dataPoint.y;
      (0, _common.renderLine)(ctx, _x, _y2, nextX, nextY, _light.COLOR.PRIMARY, 1);

      // 绘制拐点小圆形
      ctx.beginPath();
      ctx.arc(_x, _y2, 1, 0, Math.PI * 2, true); // 绘制
      ctx.fillStyle = _light.COLOR.PRIMARY;
      ctx.fill();

      // 动画
      // (function(j) {
      //   setTimeout(() => {
      //     const { x, y } = dataPoint[i];
      //     const { x: nextX, y: nextY } = dataPoint[i+1];

      //     renderLine(ctx, x, y, nextX, nextY, COLOR.PRIMARY, 1)

      //     // 绘制拐点小圆形
      //     ctx.beginPath();
      //     ctx.arc(x, y, 1, 0, Math.PI * 2, true); // 绘制
      //     ctx.fillStyle = COLOR.PRIMARY;
      //     ctx.fill()
      //   }, j * 100)
      // }(i))
    }
  };

  // DOM 变更之后，渲染之前 执行
  (0, _react.useLayoutEffect)(function () {
    var canvasEl = document.getElementById('canvas');
    var ctx = canvasEl.getContext('2d');
    var _setCanvasSize = (0, _common.setCanvasSize)(canvasEl, style, grid.width, grid.height),
      width = _setCanvasSize.width,
      height = _setCanvasSize.height;

    // 可知条件：根据画布宽高计算
    yAxisHeight = height - (grid.top + grid.bottom);
    originalPointY = height - grid.bottom;
    yAxisTickSpace = yAxisHeight / (yAxisSplitNumber - 1);
    xAxisTopPointX = width - grid.left;
    xAxisWidth = width - grid.left - grid.right;

    // 获取到数据后再填入数据和配置项
    yData.length && renderCanvas(ctx);
  }, [yData]);
  return /*#__PURE__*/_react["default"].createElement("canvas", {
    id: "canvas",
    style: {
      backgroundColor: backgroundColor
    }
  });
};
var _default = Line;
exports["default"] = _default;
module.exports = exports.default;