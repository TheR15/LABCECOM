// mock接口数据文件
import moment from 'moment';

/**
 *
 * @param {Object} param 获取K线图接口数据
 * @returns
 */
var getKLineMockData = function getKLineMockData(param) {
  // mean 均值; stddev 差值
  var _param$pageSize = param.pageSize,
    pageSize = _param$pageSize === void 0 ? 10 : _param$pageSize,
    _param$endTime = param.endTime,
    endTime = _param$endTime === void 0 ? '' : _param$endTime,
    _param$mean = param.mean,
    mean = _param$mean === void 0 ? 500 : _param$mean,
    _param$stddev = param.stddev,
    stddev = _param$stddev === void 0 ? 10 : _param$stddev;
  return new Promise(function (resolved, rejected) {
    setTimeout(resolved, 500, new Array(pageSize).fill({}).map(function (item, index) {
      var openingPrice = Math.round(Math.max(0, mean + stddev * randn_bm()));
      var closingPrice = Math.round(Math.max(0, mean + stddev * randn_bm()));
      var highestPrice = Math.max(openingPrice, closingPrice) + Math.round(stddev / 2 * randn_bm());
      var lowestPrice = Math.min(openingPrice, closingPrice) - Math.round(stddev / 2 * randn_bm());
      return {
        id: Math.random().toString().slice(2, 7),
        date: moment(endTime).subtract(pageSize - index - 1, 'days').format('MM-DD'),
        openingPrice: openingPrice,
        closingPrice: closingPrice,
        highestPrice: highestPrice,
        lowestPrice: lowestPrice
      };
    }));
  });
};
function randn_bm() {
  var u = 0,
    v = 0;
  while (u === 0) u = Math.random();
  while (v === 0) v = Math.random();
  return Math.abs(Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v));
}

/**
 *
 * @param {Object} param 获取柱状图接口数据
 * @returns
 */
var getBarMockData = function getBarMockData() {
  return new Promise(function (resolved, rejected) {
    setTimeout(resolved, 500, new Array(7).fill({}).map(function (item, index) {
      return {
        date: moment().subtract(7 - index - 1, 'days').format('MM-DD'),
        value: +('10' + Math.random().toString().slice(2, 3))
      };
    }));
  });
};
export { getKLineMockData, getBarMockData };